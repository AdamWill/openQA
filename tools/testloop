#!/usr/bin/perl -w
# This code is Copyright 2010 Bernhard M. Wiedemann
# and is licensed under the GNU General Public License version 2 or later.
# http://www.gnu.org/licenses/gpl-2.0.html

# This runs the main test loop

use strict;
use List::Util qw(shuffle);

my $testdir="testrun-cron";
my $waittime=10*60;
my $makeflags=" testdir=$testdir RANDOMENV=1 -j3 -k ";
my @extralist=qw(gnome gnome lxde lxdedevel xfce xfcedevel RAID10 kdedevel kdeplaygrounddevel gnomedevel xorgdevel kerneldevel yastdevel basesystemdevel basesystemdevel basesystemdevel mozilladevel GNOMElive KDElive GNOMEusbboot KDEusbboot KDEusbinst 11.2dup 11.3zdup 11.3dup 11.4gnome32zdup 11.4gnome32dup 11.4kde64zdup 11.4kde64dup 12.1gnome32zdup 12.1gnome32dup 12.2xfce32dup btrfs smp textmode minimalx cryptlvm btrfscryptlvm splitusr uefi mediacheck rescue);
my @extralistshuffled;
my @archlist=qw(i586 x86_64);
my @archlistshuffled;

sub skippattern($) {open(my $f, "/tmp/openqaskip") or return 0; my $pattern=<$f>; close($f); chomp($pattern); return $_[0]=~m/$pattern/; }

sub maketarget_adjust($)
{ my($t)=@_;
	# -live tests need a different .iso
	if($t=~s/-(\w+)(live|usbboot|usbinst)/-$2/) {
		my $desktop=$1;
		$t=~s/-i586-/-i686-/;
		$t=~s/-NET-/-$desktop-Live-/;
	}
	if($t=~m/-(1[1-9]\.\w+)dup/) { # distribution upgrade test
		my $base=$1;
		# we only have base images for certain archs
		if($base=~m/(11\.[12])|11\.3gnome|11\.4kde64/) {
			$t=~s/-i586-/-x86_64-/;
		} else {
			$t=~s/-x86_64-/-i586-/;
		}
	}
	rand(100)>50 && $t=~s/-NET-/-DVD-/; # run some extra tests on DVD
	return $t;
}

sub get_extra_test()
{
	print "running one random extra test to spend time without idling\n";
	@extralistshuffled=shuffle(@extralist) if not @extralistshuffled;
	my $test=pop @extralistshuffled;
	@archlistshuffled=shuffle(@archlist) if not @archlistshuffled;
	my $arch=pop @archlistshuffled;
	# note: diamond operator will stop returning results in scalar context
	my $iso=(glob "factory-testing/iso/openSUSE-*NET-$arch-*.iso")[0];
	unless ($iso) {
		print "no $arch NET iso found - should be rare";
		return;
	}
	$iso=~s{.*/}{video/};
	my $dvdiso="factory/iso/$iso"; $dvdiso=~s/-NET-/-DVD-/;
	my $maketarget=$iso;
	$maketarget=~s{-Media.iso}{-$test.ogv};
	$maketarget=maketarget_adjust($maketarget);
	# if we have a DVD iso, do some tests on this instead
	if(-e $dvdiso && rand(100)<60) {$maketarget=~s/-NET-/-DVD-/}
	print "testing $maketarget\n";
	return $maketarget;
}

sub run_extra_tests
{
	my @targets;
	for(1..6) { # try different variants before idling
		my $t=get_extra_test;
		next if(skippattern($t) && rand>0.05);
		push(@targets, $t);
	}
	system("make $makeflags @targets");
}

my $lasttime;
sub maybewait()
{
	my $t=$lasttime;
	$lasttime=time;
	return if !$t; # dont sleep first time
	my $timetowait;
	{
		my $timeneeded=time-$t;
		if($timeneeded<100) { # had nothing to do
			run_extra_tests;
			$timeneeded=time-$t;
		}
		$timetowait=$waittime-$timeneeded;
		$lasttime=time;
		return if $timetowait<=0; # dont sleep if loop took long
	}

	print "waiting $timetowait seconds\n";
	sleep $timetowait; # wait to not overload rsync server
	$lasttime=time;
}

our $wantrestart=0;
$SIG{HUP}=sub{$wantrestart=1; print "will restart after current test\n"};
$SIG{USR1}=sub{}; # interrupt sleep

# perpetual main loop
while (! -e "stopfile") {
	maybewait();
	system("make prune prune2 preparesnapshot");
	system("make newvideos $makeflags");
	system("tools/cansnapshot && make snapshot");
	if($wantrestart) {exec($0, @ARGV) or die $!}
}

