#!/usr/bin/perl -w
# This code is Copyright 2010 Bernhard M. Wiedemann
# and is licensed under the GNU General Public License version 2 or later.
# http://www.gnu.org/licenses/gpl-2.0.html

# This runs the main test loop

use strict;
use List::Util qw(shuffle);

my $testdir="testrun-cron";
my $waittime=10*60;
my $makeflags=" testdir=$testdir -j4 -k ";
my @extralist=qw(gnome gnome lxde lxdedevel xfce xfcedevel RAID10 KDF kdeplayground gnomedevel xorgdevel kernelhead basesystem mozilladevel);
my @extralistshuffled;
my @archlist=qw(i586 x86_64);
my @archlistshuffled;

sub get_extra_test()
{
	print "running one random extra test to spend time without idling\n";
	@extralistshuffled=shuffle(@extralist) if not @extralistshuffled;
	my $test=pop @extralistshuffled;
	@archlistshuffled=shuffle(@archlist) if not @archlistshuffled;
	my $arch=pop @archlistshuffled;
	# note: diamond operator will stop returning results in scalar context
	my $iso=(glob "factory-testing/iso/openSUSE-NET-$arch-*.iso")[0];
	unless ($iso) {
		print "no $arch NET iso found - should be rare";
		return;
	}
	my $maketarget=$iso;
	$maketarget=~s{.*/}{video/};
	$maketarget=~s{-Media.iso}{-$test.ogv};
	print "testing $maketarget\n";
	return $maketarget;
}

sub run_extra_tests
{
	my @targets;
	for(1..4) { # try different variants before idling
		my $t=get_extra_test;
		push(@targets, $t);
	}
	system("make $makeflags @targets");
}

my $lasttime;
sub maybewait()
{
	my $t=$lasttime;
	$lasttime=time;
	return if !$t; # dont sleep first time
	my $timetowait;
	{
		my $timeneeded=time-$t;
		if($timeneeded<100) { # had nothing to do
			run_extra_tests;
			$timeneeded=time-$t;
		}
		$timetowait=$waittime-$timeneeded;
		return if $timetowait<=0; # dont sleep if loop took long
	}

	print "waiting $timetowait seconds\n";
	sleep $timetowait; # wait to not overload rsync server
}

our $wantrestart=0;
$SIG{HUP}=sub{$wantrestart=1; print "will restart after current test\n"};

# perpetual main loop
while (! -e "stopfile") {
	maybewait();
	system("make prune prune2 preparesnapshot");
	system("make newvideos $makeflags");
	system("tools/cansnapshot && make snapshot");
	if($wantrestart) {exec($0, @ARGV) or die $!}
}

