#!/usr/bin/perl -w
# Copyright (c) 2013 SUSE Linux Products GmbH
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

=head1 boilerplate

boilerplate - boilerplate code for perl scripts

=head1 SYNOPSIS

boilerplate [OPTIONS] FILE

=head1 OPTIONS

=over 4

=item B<--host>

specify dispatcher/scheduler host to connect to

=item B<--help, -h>

print help

=back

=head1 DESCRIPTION

lorem ipsum ...

=cut

use strict;
use POSIX ":sys_wait_h"; # WNOHANG
use Data::Dump;
use JSON::RPC::Client;
use Fcntl;
use File::Path qw/make_path remove_tree/;
use FindBin;
#use lib "$FindBin::Bin/../www/cgi-bin/modules"
#use openqa;

my $openqa_base = "/var/cache/openqa";
my $pooldir;
my $isodir = "$openqa_base/factory/iso";
my $results_dir = "$openqa_base/testresults";
my $videodir = "$openqa_base/video";

my $isotovideo = "/usr/lib/os-autoinst/tools/isotovideo";

my $keep_running = 1;
my $got_sigchld = 0;

use Getopt::Long;
Getopt::Long::Configure("no_ignore_case");

my %options;

sub usage($) {
	my $r = shift;
	eval "use Pod::Usage; pod2usage($r);";
	if ($@) {
		die "cannot display help, install perl(Pod::Usage)\n";
	}
}

GetOptions(
	\%options,
	"instance=i",
	"isotovideo=s",
	"host=s",
	"verbose|v",
	"help|h",
) or usage(1);

usage(1) unless exists $options{'host'};
usage(0) if ($options{'help'});

my $verbose = $options{'verbose'};

$options{'instance'} ||= 0;

$options{'host'} .= '/jsonrpc' unless $options{'host'} =~ '/';
$options{'host'} = 'http://'.$options{'host'} unless $options{'host'} =~ '://';

$pooldir = $openqa_base.'/pool/'.($options{'instance'}||'manual');

$ENV{'QEMUPORT'} = ($options{'instance'})*10 + 20002;
$ENV{'VNC'}      = ($options{'instance'})    + 90;

$isotovideo = $options{'isotovideo'} if $options{'isotovideo'};

sub lockit()
{
	if (! -e $pooldir) {
		make_path($pooldir);
	}
	chdir $pooldir || die "cannot change directory to $pooldir: $!\n";
	open(my $lockfd, '>>', '.locked') or die "cannot open lock file: $!\n";
	unless (fcntl($lockfd, F_SETLK, pack('ssqql', F_WRLCK, 0, 0, 0, $$))) {
		die "$pooldir already locked\n";
	}
	$lockfd->autoflush(1);
	truncate($lockfd, 0);
	print $lockfd "$$\n";
	return $lockfd;
}

sub workit($)
{
	my $job = shift;
	my $iso = $job->{'settings'}->{'ISO'};
	return undef unless $iso;

	$iso = join('/', $isodir, $iso);
	unless (-e $iso) {
		warn "$iso does not exist!\n";
		return undef;
	}
	$job->{'settings'}->{'ISO'} = $iso;

	my $child = fork();
	die "failed to fork: $!\n" unless defined $child;
	unless ($child) {
		# just to make isotovideo happy
		unlink('env.sh');
		open(my $e, '>', 'env.sh') or die "can't open env.sh: $!\n";
		close $e;
		while (my ($k, $v) = each $job->{'settings'}) {
			print "setting $k=$v\n" if $verbose;
			$ENV{$k} = $v;
		}
		printf "$$: WORKING %d\n", $job->{'id'};
		exec($isotovideo, $iso);
		die "exec failed: $!\n";
	} else {
		return $child;
	}
}

sub job_get_dest_log($)
{
	my $job = shift;
	return sprintf("%s/%s.ogv.autoinst.txt", $videodir, $job->{'settings'}->{'NAME'});
}

sub main()
{
	my $lockfd = lockit();
	my $client = new JSON::RPC::Client;

	printf "connecting to %s ...\n", $options{'host'} if $verbose;
	$client->prepare($options{'host'}, [qw/list_jobs job_grab job_release job_done worker_register/]) or die "xxx $!\n";


	my $workerid = $client->worker_register('localhost', $options{'instance'}, 'qemu');

	my $job;
	my $worker;
	my $testresults;
	while($keep_running) {
		unless ($job) {
			print "waiting for job ...\n" if $verbose;
			$job = $client->job_grab($workerid);
			unless ($job) {
				sleep 5;
				next;
			}
			printf "got job %d\n", $job->{'id'};
			my $name = $job->{'settings'}->{'NAME'};
			$testresults = join('/', $results_dir, $name);
			if (-e $testresults) {
				remove_tree($testresults);
			}
			symlink(join('/', $pooldir, 'testresults', $name), $testresults) or warn "symlink $testresults: $!\n";
			# create/truncate destination log file. Used as running indicator by web ui
			if (open(my $fd, '>', job_get_dest_log($job))) {
				close $fd;
			}
			$worker = workit($job);
			unless ($worker) {
				warn "launching worker failed, releasing job\n";
				$client->job_release($job->{'id'});
				$job = undef;
			}
		}
		if ($worker && $got_sigchld) {
			$got_sigchld = 0;
			my $pid = waitpid($worker, WNOHANG);
			die "huh? wrong child?\n" unless $pid == $worker;
			my $result = "ok";
			if ($?) {
				warn "child $pid died with exit status $?\n";
				$result = "FAIL";
			}

			my $name = $job->{'settings'}->{'NAME'};
			rename("$pooldir/video/$name.ogv", sprintf("%s/%s.ogv", $videodir, $name)) or warn "can't rename video: $!\n";
			unlink($testresults); # can't move directory atomically to replace symlink
			unless (rename("$pooldir/testresults/$name", $testresults)) {
				warn "can't rename test results $pooldir/testresults/$name -> $testresults: $!\n";
			}
			unless (rename("$pooldir/currentautoinst-log.txt", job_get_dest_log($job))) {
				warn "can't rename log: $!\n";
				unlink(job_get_dest_log($job));
			}

			printf "setting job %d to $result\n", $job->{'id'} if $verbose;
			$client->job_done($job->{'id'}, $result);
			$job = undef;

		}
		print "waiting for some action ...\n";
		sleep 2;
		# FIXME
		# $client->get_command($workerid);
	}
	if ($job) {
		print "killing $worker\n";
		kill("SIGTERM", $worker);
		unlink($testresults);
		unlink(job_get_dest_log($job));
		$client->job_release($job->{'id'});
	}
}

sub catch_exit
{
	$keep_running = 0;
}

sub catch_sigchld
{
	print "got SIGCHLD\n" if $verbose;
	$got_sigchld = 1;
}

$SIG{HUP} = \*catch_exit;
$SIG{TERM} = \*catch_exit;
$SIG{INT} = \*catch_exit;
$SIG{CHLD} = \*catch_sigchld;

main();

print "quit\n";
exit 0;
