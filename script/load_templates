#!/usr/bin/env perl

# Copyright (C) 2014 SUSE Linux Products GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=head1 load_templates

load_templates - load openqa job templates

=head1 SYNOPSIS

load_templates [OPTIONS] FILE

=head1 OPTIONS

=over 4

=item B<--clean>

delete all job templates before loading new ones. be careful!

=item B<--help, -h>

print help

=back

=head1 DESCRIPTION

lorem ipsum ...

=cut

BEGIN {
    use FindBin qw($Bin);
    use lib "$Bin/../lib", "$Bin/../lib/OpenQA";
}

use strict;
use File::Basename qw/dirname/;
use POSIX qw/getuid getgid setuid setgid/;
use OpenQA::Utils;
use Schema::Schema;
use Try::Tiny;
use Data::Dump qw/dd pp/;

use Getopt::Long;

Getopt::Long::Configure("no_ignore_case");

my %options;

sub usage($) {
    my $r = shift;
    eval "use Pod::Usage; pod2usage($r);";
    if ($@) {
        die "cannot display help, install perl(Pod::Usage)\n";
    }
}

GetOptions(\%options, "clean", "help|h",) or usage(1);

usage(1) if $options{help} || $#ARGV;

my $datafile = shift @ARGV;
die "Data file not found\n" unless $datafile && -r $datafile;

my $info;

if ($datafile =~ /\.json$/) {
    use JSON;
    local $/;
    open(my $fh, '<', $datafile);
    $info = JSON->new->relaxed->decode(<$fh>);
    close $fh;
    dd $info;
}
else {
    $info = do $datafile;
    if (my $error = $@) {
        die "Error in data file: $error\n";
    }
}

my $schema = OpenQA::Utils::connect_db();

if ($schema->dsn =~ /:SQLite:dbname=(.*)/) {
    my $dbdir = dirname($1);
    die "$dbdir does not exist\n" unless -d $dbdir;
    my @s = stat(_);
    if (getgid() != $s[5]) {
        setgid($s[5]) or die "can't change gid to $s[5]: $!\n";
    }
    if (getuid() != $s[4]) {
        setuid($s[4]) or die "can't change uid to $s[4]: $!\n";
    }

    # speed this up a bit
    $schema->storage->dbh_do(
        sub {
            my ($storage, $dbh, @args) = @_;
            $dbh->do("PRAGMA synchronous = OFF");
        }
    );
}

my @tables = (qw/Machines TestSuites Products JobTemplates/);
my %added;
for my $table (@tables) {
    $schema->resultset($table)->delete_all() if $options{'clean'};
    next unless $info->{$table};
    $added{$table}->{of} = @{$info->{$table}};
    $added{$table}->{added} = 0;
    for my $entry (@{$info->{$table}}) {
        try {
            $schema->resultset($table)->create($entry);
            ++$added{$table}->{added};
        }
        catch {
            warn $_, pp $entry;
        };
    }
}

dd \%added;
