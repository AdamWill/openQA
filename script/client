#!/usr/bin/perl

# Copyright (C) 2014 SUSE Linux Products GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=head1 boilerplate

client - test openqa json interface

=head1 SYNOPSIS

client [OPTIONS] PATH

=head1 OPTIONS

=over 4

=item B<--host> HOST

connect to specified host, defaults to localhost

=item B<--help, -h>

print help

=back

=head1 SYNOPSIS

top level entry points: jobs, workers, isos.

=item client --host openqa.example.com jobs

=item client --host openqa.example.com jobs/1

=item client --host openqa.example.com delete jobs/1

=item client --host openqa.example.com isos post iso=bar.iso tests=blah

=head1 DESCRIPTION

lorem ipsum ...

=cut

use Data::Dump;
use Mojo::UserAgent;
use Mojo::URL;
use Mojo::Util 'hmac_sha1_sum';
use Getopt::Long;
Getopt::Long::Configure("no_ignore_case");

my %options;

sub usage($) {
	my $r = shift;
	eval "use Pod::Usage; pod2usage(1);";
	if ($@) {
		die "cannot display help, install perl(Pod::Usage)\n";
	}
}

sub api_call($$$) {
    my ($method, $url) = (shift, shift);
    my $h = shift;
    my $headers = {%$h};
    my $ua = Mojo::UserAgent->new;

    $headers->{'X-API-Key'} = $options{'key'};
    my $timestamp = time;
    $headers->{'X-API-Microtime'} = $timestamp;
    my $msg = $url->to_string;
    $headers->{'X-API-Hash'} = hmac_sha1_sum($url->to_string.$timestamp, $options{'secret'});

    $ua->$method($url, $headers)->res;
}

GetOptions(
	\%options,
	"host=s",
	"apibase=s",
	"verbose|v",
    "key:s",
    "secret:s",
	"help|?",
) or usage(1);

usage(1) unless @ARGV;
$options{'host'} ||= 'localhost';
$options{'apibase'} ||= '/api/v1';

my $path = shift @ARGV;
# Relative paths are routed to v1
if ($path !~ s/^\///) {
    $path = join('/', $options{apibase}, $path);
}

my $method = 'get';
my @params;

for my $arg (@ARGV) {
    if ($arg =~ /^(?:get|post|delete|put)$/i) {
        $method = lc $arg;
    } elsif ($arg =~ /^[[:alnum:]]+=.+/) {
        push @params, $arg;
    } else {
    }
}

my $url;
if ($options{'host'} !~ '/') {
	$url = Mojo::URL->new();
	$url->host($options{'host'});
	$url->scheme('http');
} else {
	$url = Mojo::URL->new($options{'host'});
}

my $headers = {
    Accept => 'application/json'
};

$url->path($path);
$url->query(join('&', @params)) if @params;

my $res = api_call($method, $url, $headers);
if ($res->code == 200) {
    dd($res->json || $res->body);
} else {
    print $res->code." ".$res->message."\n";
}

1;
