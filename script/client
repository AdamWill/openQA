#!/usr/bin/perl

=head1 boilerplate

client - test openqa json interface

=head1 SYNOPSIS

client [OPTIONS] PATH

=head1 OPTIONS

=over 4

=item B<--host> HOST

connect to specified host, defaults to localhost

=item B<--help, -h>

print help

=back

=head1 SYNOPSIS

top level entry points: jobs, workers, isos.

=item client --host openqa.example.com jobs

=item client --host openqa.example.com jobs/1

=item client --host openqa.example.com delete jobs/1

=item client --host openqa.example.com isos post iso=bar.iso tests=blah

=head1 DESCRIPTION

lorem ipsum ...

=cut

use Data::Dump;
use Mojo::UserAgent;
use Mojo::URL;
use Getopt::Long;
Getopt::Long::Configure("no_ignore_case");

my %options;

sub usage($) {
	my $r = shift;
	eval "use Pod::Usage; pod2usage(1);";
	if ($@) {
		die "cannot display help, install perl(Pod::Usage)\n";
	}
}

GetOptions(
	\%options,
	"host=s",
	"verbose|v",
	"help|?",
) or usage(1);

usage(1) unless @ARGV;
$options{'host'} ||= 'localhost';

my $path = shift @ARGV;
# Relative paths are routed to v1
if ($path !~ s/^\///) {
    $path = 'api/v1/'.$path;
}

my $method = 'get';
my @params;

for my $arg (@ARGV) {
    if ($arg =~ /^(?:get|post|delete|put)$/i) {
        $method = $arg;
    } elsif ($arg =~ /^[[:alnum:]]+=.+/) {
        push @params, $arg;
    } else {
    }
}

my $ua = Mojo::UserAgent->new;
my $url;
if ($options{'host'} !~ '/') {
	$url = Mojo::URL->new();
	$url->host($options{'host'});
	$url->scheme('http');
} else {
	$url = Mojo::URL->new($options{'host'});
}
$url->path($path);
$url->query(join('&', @params)) if @params;

my $res = $ua->$method($url)->res;
if ($res->code == 200) {
    dd($res->json || $res->body);
} else {
    print $res->code." ".$res->message."\n";
}

1;
