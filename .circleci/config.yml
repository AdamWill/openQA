version: 2

aliases:
  - &restore_cache
    keys:
      - v1-{{ checksum ".circleci/dependencies.txt" }}-{{ checksum ".circleci/build_cache.sh" }}

  - &save_cache
    key: v1-{{ checksum ".circleci/dependencies.txt" }}-{{ checksum ".circleci/build_cache.sh" }}
    paths:
      - "/var/cache/zypp/packages"
      - "~/project/assets/cache"

  - &restore_fullstack_cache
    keys:
      - v1-{{ checksum ".circleci/autoinst.sha" }}-{{ checksum ".circleci/build_autoinst.sh" }}

  - &save_fullstack_cache
    key: v1-{{ checksum ".circleci/autoinst.sha" }}-{{ checksum ".circleci/build_autoinst.sh" }}
    paths:
      - "/var/cache/autoinst"

  - &chown_hack_for_cache
    command: |
      [ -z "$CIRCLE_WORKFLOW_ID" ] || sudo chown -R squamata /var/cache/zypp/packages

  - &chown_hack_for_cache_fullstack
    command: |
      # hack as we don't want run container as root
      [ -z "$CIRCLE_WORKFLOW_ID" ] || {
        sudo chown -R squamata /var/cache/zypp/packages
        sudo mkdir -p /var/cache/autoinst
        sudo chown -R squamata /var/cache/autoinst
      }

  - &show_diagnostic_info
    command: |
      find /var/cache/zypp/packages/ | wc -l
      [ -z "$CIRCLE_WORKFLOW_ID" ] || ls -lRa /var/cache/zypp/packages/openQA || :

  - &check_cache
    command: |
      find /var/cache/zypp/packages/ | wc -l
      [ -z "$CIRCLE_WORKFLOW_ID" ] || ls -lRa /var/cache/zypp/packages/openQA

  - &install_cached_packages
    command: |
        set -x
        if [ -z "$CIRCLE_WORKFLOW_ID" ]; then
          bash .circleci/build_cache.sh
        else
          sudo rpm -i -f $(find /var/cache/zypp/packages/ | grep '.rpm$')
        fi

  - &test_junit
    name: "Enabling JUnit output for Perl tests"
    command: |
      mkdir -p test-results/junit
      echo 'export JUNIT_OUTPUT_FILE=test-results/junit/${CIRCLE_JOB}.xml' >> $BASH_ENV

  - &store_test_results
    path: test-results/junit

  - &store_artifacts
    path: test-results/t
    destination: artifacts

  - &build_autoinst
    command: |
      if [ ! -z "$CIRCLE_WORKFLOW_ID" ]; then # only in workflow
        rm -rf ../os-autoinst
        sudo cp -r /var/cache/autoinst ../os-autoinst
        sudo chown -R 1000 ../os-autoinst/t/data
      else # only in local run
         [ -d ../os-autoinst ] || { sudo mkdir ../os-autoinst && sudo chown -R 1000 ../os-autoinst; }
         bash .circleci/build_autoinst.sh ../os-autoinst $(cat .circleci/autoinst.sha)
       fi

  - &make_test
    command: |
      case "$CIRCLE_JOB" in
      t)         make coverage-codecov CHECKSTYLE=1 PROVE_ARGS="$HARNESS -v t/*.t"     GLOBIGNORE="$(cat .circleci/unstable_tests.txt | tr '\n' :)";;
      ui)        make coverage-codecov CHECKSTYLE=0 PROVE_ARGS="$HARNESS -v t/ui/*.t"  GLOBIGNORE="$(cat .circleci/unstable_tests.txt | tr '\n' :)";;
      api)       make coverage-codecov CHECKSTYLE=0 PROVE_ARGS="$HARNESS -v t/api/*.t" GLOBIGNORE="$(cat .circleci/unstable_tests.txt | tr '\n' :)";;
      unstable)  for f in $(cat .circleci/unstable_tests.txt); do make coverage CHECKSTYLE=0 PROVE_ARGS="$HARNESS -v $f" RETRY=3; done; make coverage-report-codecov;;
      fullstack) make coverage-codecov CHECKSTYLE=0 FULLSTACK=1           PROVE_ARGS="$HARNESS -v t/full-stack.t" RETRY=3;;
      scheduler) make coverage-codecov CHECKSTYLE=0 SCHEDULER_FULLSTACK=1 PROVE_ARGS="$HARNESS -v t/05-scheduler-full.t";;
      developer) make coverage-codecov CHECKSTYLE=0 DEVELOPER_FULLSTACK=1 PROVE_ARGS="$HARNESS -v t/33-developer_mode.t";;
      build.docs) COMMIT_AUTHOR_EMAIL=skynet@open.qa GEM_HOME=$(pwd)/.gem script/generate-documentation $encrypted_e2c381aa6b8c_key $encrypted_e2c381aa6b8c_iv;;
      esac

images:
  - &docker_config
    user: squamata

  - &base
    image: registry.opensuse.org/devel/openqa/ci/containers/base:latest
    <<: *docker_config

  - &dependency_bot
    image: registry.opensuse.org/devel/openqa/ci/containers/dependency_bot:latest

jobs:
  dependencies-pr:
    docker:
      - <<: *dependency_bot
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            git config user.email "skynet@open.qa"
            git config user.name "Dependency bot circleci"
            git config core.autocrlf true
            hub --version
      - run:
          command: |
            depid=$(date +%y%m%d%H%M%S)
            git checkout -b dependency_$depid
            bash .circleci/build_dependencies.sh

            git --no-pager diff .circleci/dependencies.txt
            set -x
            git diff --quiet .circleci/dependencies.txt || (
                set +o pipefail
                curl -s https://api.github.com/repos/os-autoinst/os-autoinst/commits | grep sha | head -n 1 | grep -o -E '[0-9a-f]{40}' > .circleci/autoinst.sha
                git add .circleci/dependencies.txt .circleci/autoinst.sha
                git commit -m "Dependency cron $depid"
                echo 'echo $GITHUB_TOKEN' > $(pwd)/.git-askpass
                export GIT_ASKPASS=$(pwd)/.git-askpass
                chmod +x $(pwd)/.git-askpass
                git push -q -f https://token@github.com/openqabot/openQA.git dependency_$depid
                hub pull-request -m "Dependency cron $depid" --base $CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH --head openqabot:dependency_$depid
            )

  cache:
    docker:
      - <<: *base
    steps:
      - checkout
      - run: ls -la && pwd
      - run: cat .circleci/dependencies.txt
      - run: *chown_hack_for_cache
      - restore_cache: *restore_cache
      - run: *show_diagnostic_info
      - run:
          command: |
            if [ ! -d /var/cache/zypp/packages/openQA ]; then
              bash -x .circleci/build_cache.sh
              script/generate-packed-assets
            fi
      - save_cache: *save_cache

  cache.fullstack:
    docker:
      - <<: *base
    steps:
      - checkout
      - run: *chown_hack_for_cache_fullstack
      - restore_cache: *restore_cache
      - restore_cache: *restore_fullstack_cache
      - run: find /var/cache/zypp/packages/ | wc -l
      - run:
          command: |
            ls -lRa /var/cache/zypp/packages/openQA || :
            if [ ! -d /var/cache/autoinst/t ]; then
              bash -x .circleci/build_autoinst.sh "/var/cache/autoinst" $(cat .circleci/autoinst.sha)
            fi
      - save_cache: *save_fullstack_cache

  t: &test-template
    docker:
      - <<: *base
    environment:
      JUNIT_PACKAGE: openQA
      JUNIT_NAME_MANGLE: perl
      PERL_TEST_HARNESS_DUMP_TAP: test-results
      HARNESS: --harness TAP::Harness::JUnit
    steps:
      - checkout
      - run: *chown_hack_for_cache
      - restore_cache: *restore_cache
      - run: *check_cache
      - run: *install_cached_packages
      - run: *test_junit
      - run: *make_test
      - store_test_results: *store_test_results
      - store_artifacts: *store_artifacts

  fullstack: &test-fullstack-template
    docker:
      - <<: *base
    environment:
      JUNIT_PACKAGE: openQA
      JUNIT_NAME_MANGLE: perl
      PERL_TEST_HARNESS_DUMP_TAP: test-results
    steps:
      - checkout
      - run: *chown_hack_for_cache
      - run: *chown_hack_for_cache_fullstack
      - restore_cache: *restore_cache
      - restore_cache: *restore_fullstack_cache
      - run: *check_cache
      - run: *install_cached_packages
      - run: *build_autoinst
      - run: *test_junit
      - run: *make_test
      - store_test_results: *store_test_results
      - store_artifacts: *store_artifacts

  ui:
    <<: *test-template

  api:
    <<: *test-template
  
  unstable:
    <<: *test-template

  developer:
    <<: *test-fullstack-template

  scheduler:
    <<: *test-fullstack-template

  build.docs:
    <<: *test-template

workflows:
  version: 2
  test:
    jobs:
      - cache
      - t:
         requires:
           - cache
      - api:
         requires:
           - cache
      - ui:
         requires:
           - cache
      - unstable:
         requires:
           - cache
      - cache.fullstack:
         requires:
           - cache
      - fullstack:
         requires:
           - cache.fullstack
      - developer:
         requires:
           - cache.fullstack
      - scheduler:
         requires:
           - cache.fullstack
      - build.docs:
         requires:
           - cache

  nightly:
   triggers:
     - schedule:
         cron: "0 0 * * *"
         filters:
           branches:
             only:
               - master
   jobs:
      - dependencies-pr
