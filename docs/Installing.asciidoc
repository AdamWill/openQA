openQA installation guide
=========================
:author: openSUSE Team at SUSE
:toc:

Introduction
------------
[id="intro"]

openQA is an automated test tool that makes it possible to test the whole
installation process of an operating system. It's free software released
under the http://www.gnu.org/licenses/gpl-2.0.html[GPLv2 license]. The
source code and documentation are hosted in the
https://github.com/os-autoinst[os-autoinst organization on GitHub].

This document provides the information needed to install and setup the tool, as
well as information useful for everyday administration of the system. It's
assumed that the reader is already familiar with openQA and has already read the
Starter Guide, available at the 
https://github.com/os-autoinst/openQA[official repository].

Installation
------------
[id="installation"]

The easiest way to install openQA is from packages. You can find them in OBS in
the https://build.opensuse.org/project/show/devel:openQA[openQA] repository or
the latest development version can also be found in OBS in the
https://build.opensuse.org/project/show/devel:openQA:devel[openQA:devel]
repository. Installation on openSUSE is therefore pretty simple:

[source,sh]
--------------------------------------------------------------------------------
zypper ar -f obs://devel:openQA/openSUSE_13.1 openQA
zypper ar -f obs://devel:openQA:13.1/openSUSE_13.1 openQA-perl-modules
zypper in openQA
# Start WebUI
systemctl start openqa-webui
--------------------------------------------------------------------------------

Now you have the WebUI running. You can take a look at the WebUI at
http://localhost:9526 but so far it is empty. You need to do a few
more actions to get it configured in a way that it will be able to
run tests.

Basic configuration
-------------------
[id="basic"]

OpenID
~~~~~~

By default openQA uses the opensuse.org OpenID provider to
authenticate users. If you want to change that, you can do it in
+/etc/openqa/openqa.ini+. The first user that logs in (if there is
no admin yet) will automatically get admin and operator rights. As
admin you need to do some further actions to get your openQA
instance testing software.

SSL
~~~

By default openQA expects to be run with HTTPS. If you don't have an
SSL certificate for your host you need to turn HTTPS off. You can do
that in +/etc/openqa/openqa.ini+:

[source,ini]
--------------------------------------------------------------------------------
[openid]
httpsonly = 0
--------------------------------------------------------------------------------


Running workers
~~~~~~~~~~~~~~~

Workers are processes running virtual machines to perform the actual
testing. They are distributed as a separate package and can be installed on
multiple machines but still using only one WebUI.

[source,sh]
--------------------------------------------------------------------------------
zypper in openQA-worker
--------------------------------------------------------------------------------

To allow them to access your instance, you need to log into
openQA as operator and create a pair of API key and secret. Once you
are logged in, follow the link 'manage API keys' in the top right
corner. Click the 'create' button to generate +key+ and +secret+.
Copy&Paste them into +/etc/openqa/client.conf+ on machine where openQA-worker
is installed. Make sure to put in a section reflecting your webserver URL.
In the simplemost case, your +client.conf+ may look like this:

[source,ini]
--------------------------------------------------------------------------------
[localhost]
key = 0123456789ABCDEF
secret = 0123456789ABCDEF
--------------------------------------------------------------------------------

To start the workers you can use the provided systemd files via +systemctl
start openqa-worker@1+. This will start worker number one. You can start as
many workers as you dare, you just need to supply different 'worker id' (number
after @).

You can also run workers manually from command line.

[source,sh]
--------------------------------------------------------------------------------
sudo -u geekotest /usr/share/openqa/script/worker --instance X
--------------------------------------------------------------------------------

This will run a worker manually showing you debug output. If you haven't
installed 'os-autoinst' from packages make sure to pass +--isotovideo+ option
to point to the checkout dir where isotovideo is, not to +/usr/lib+! Otherwise
it will have trouble finding its perl modules.

Configuring remote workers
~~~~~~~~~~~~~~~~~~~~~~~~~~

There are some additional requirements to get remote worker running. First is to
ensure shared storage between openQA WebUI and workers.
Directory +/var/lib/openqa/share+ contains all required data and should be
shared with read-write access across all nodes present in openQA cluster.
This step is intentionally left on system administrator to choose proper shared
storage for her specific needs.

Example of NFS configuration:
NFS server is where openQA WebUI is running. Content of +/etc/exports+
[source]
--------------------------------------------------------------------------------
/var/lib/openqa/share *(fsid=0,rw,no_root_squash,sync,no_subtree_check)
--------------------------------------------------------------------------------

NFS clients are where openQA workers are running. Run following command:
[source, sh]
--------------------------------------------------------------------------------
mount -t nfs openQA-webUI-host:/var/lib/openqa/share /var/lib/openqa/share
--------------------------------------------------------------------------------

Apache proxy
~~~~~~~~~~~~

It's recommended to run openQA behind an apache proxy. See
+openqa.conf.template+ config file in +/etc/apache2/vhosts.d+. To make
everything work correctly, you need to enable the 'headers', 'proxy',
'proxy_http' and 'proxy_wstunnel' modules using 'a2enmod'.

Advanced configuration
----------------------
[id="advanced"]


Setting up git support
~~~~~~~~~~~~~~~~~~~~~~

Editing needles from web can optionally commit new or changed needles
automatically to git. To do so, you need to enable git support by setting

[source,ini]
--------------------------------------------------------------------------------
[global]
scm = git
--------------------------------------------------------------------------------
in +/etc/openqa/openqa.ini+. Once you do so and restart the web interface, openQA will
automatically commit new needles to the git repository.

You may want to add some description to automatic commits coming
from the web UI.
You can do so by setting your configuration in the repository
(+/var/lib/os-autoinst/needles/.git/config+) to some reasonable defaults such as:

--------------------------------------------------------------------------------
[user]
	email = whatever@example.com
	name = openQA web UI
--------------------------------------------------------------------------------

To enable automatic pushing of the repo as well, you need to add the following
to your openqa.ini:

[source,ini]
--------------------------------------------------------------------------------
[scm git]
do_push = yes
--------------------------------------------------------------------------------
Depending on your setup, you might need to generate and propagate
ssh keys for user 'geekotest' to be able to push.

Worker settings
~~~~~~~~~~~~~~~

Default behaviour for all workers is to use the 'Qemu' backend and connect to
'http://localhost'. If you want to change some of those options, you can do so
in +/etc/openqa/workers.ini+. For example to point the workers to the FQDN of
your host (needed if test cases need to access files of the host) use the
following setting:

[source,ini]
--------------------------------------------------------------------------------
[global]
HOST = http://openqa.example.com
--------------------------------------------------------------------------------

Once you got workers running they should show up in the admin section of openQA in
the workers section as 'idle'. When you get so far, you have your own instance
of openQA up and running and all that is left is to set up some tests.


Filesystem Layout
-----------------
[id="filesystem"]

The openQA web interface can be started via +MOJO_REVERSE_PROXY=1 morbo script/openqa+ in
development mode.

+/var/lib/openqa/+ must be owned by root and contain several sub
directories owned by the user that runs the workers (default 'geekotest'):

* +backlog+
* +cache+ (cache directory, needs to be owned by the user who runs openqa)
* +factory/iso+
* +perl/+ (subdirectory 'autoinst' must link to +/usr/lib/os-autoinst+)
* +pool/1+ (add more for each worker)
* +testresults+
* +tools+ (symlink to +/usr/share/openqa/tools/+)

+/var/lib/openqa/db+ contains the sqlite database and must be owned by
the user that runs the web interface ('geekotest'). To initially create this
database, you need to run +tools/initdb+.

Troubleshooting
---------------
[id="troubleshooting"]

Tests fail quickly
~~~~~~~~~~~~~~~~~~

Check the log files in +/var/lib/openqa/testresults+

KVM doesn't work
~~~~~~~~~~~~~~~~

* make sure you have a machine with kvm support
* make sure +kvm_intel+ or +kvm_amd+ modules are loaded
* make sure you do have virtualization enabled in BIOS
* make sure the 'geekotest' user can access +/dev/kvm+
* make sure you are not already running other hypervisors such as VirtualBox
