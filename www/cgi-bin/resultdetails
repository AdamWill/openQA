#!/usr/bin/perl -w
use strict;
use CGI ":standard";
use FindBin;
use lib "$FindBin::Bin/modules";
use openqa;
use Text::MicroTemplate "encoded_string";
use Text::MicroTemplate::Extended;
use POSIX "strftime";

my $testname=$ENV{PATH_INFO};
if(!defined $testname) { print header(-status=>404)."must specify result file as path"; exit 0 }
$testname=~s%^/%%;
if($testname=~/(?:\.\.)|[^a-zA-Z0-9._+-]/){ print header(-status=>"403 Forbidden")."Forbidden: invalid path"; exit 0 }
$testname=~s/\.autoinst\.txt$//; $testname=~s/\.ogv$//; # be tolerant in what we accept
my $testresultdir=openqa::testresultdir($testname);
my $fqfn="$resultdir/$testname/autoinst-log.txt";
if(!-e $fqfn) { print redirect(-status=>302, -location => "/running/$testname")."test is not finished, try live view"; exit 0 }

my $results = test_result($testname);

my @modlist=();
foreach my $module (@{$results->{'testmodules'}}) {
	my $name = $module->{'name'};
	# add link to $testresultdir/$name*.png via png CGI
	my @imglist;
	my @wavlist;
        my $num = 1;
	foreach my $img (@{$module->{'details'}}) {
            if( $img->{'screenshot'} ) {
                my $imgpath = data_name("$testresultdir/".$img->{'screenshot'});
                push(@imglist, {name => $imgpath, num => $num++, result => $img->{'result'}});
            }
            elsif( $img->{'audio'} ) {
		push(@wavlist, {name => $img->{'audio'}, num => $num++, result => $img->{'result'}});
            }
        }

#FIXME: Read ocr also from results.json as soon as we know how it looks like

	# add link to $testresultdir/$name*.txt as direct link
	my @ocrlist;
	foreach my $ocrpath (<$testresultdir/$name-[0-9]*.txt>) {
		$ocrpath = data_name($ocrpath);
		my $ocrscreenshotid = $ocrpath;
		$ocrscreenshotid=~s/^\w+-(\d+)/$1/;
		my $ocrres = $module->{'screenshots'}->[--$ocrscreenshotid]->{'ocr_result'} || 'na';
		push(@ocrlist, {name => $ocrpath, result => $ocrres});
	}

	my $sound = (get_testwavs($module->{'name'}))?1:0;
	my $ocr = (@ocrlist)?1:0;
	push(@modlist, {
		name => $module->{'name'},
		result => $module->{'result'},
		screenshots => \@imglist, wavs => \@wavlist, ocrs => \@ocrlist,
		attention => (($module->{'flags'}->{'important'}||0) && ($module->{'result'}||'') ne 'ok')?1:0,
		refimg => 0, audio => $sound, ocr => $ocr
	});
}

my $backlogpath = back_log($testname);
my $diskimg = 0;
if(-e "$backlogpath/l1") {
	if((stat("$backlogpath/l1"))[12] && !((stat("$backlogpath/l2"))[12])) { # skip raid
		$diskimg = 1;
	}
}

my $backend_info = parse_log_json($fqfn);

# details box
#FIXME: get test duration
#my $test_duration = strftime("%H:%M:%S", gmtime(test_duration($testname)));
my $test_duration = 'n/a';

# result files box
my @resultfiles = test_resultfile_list($testname);

# uploaded logs box
my @ulogs = test_uploadlog_list($testname);

my $mt = Text::MicroTemplate::Extended->new(
	include_path  => ['../htdocs/template'],
	template_args => { overall => $results->{'overall'}, modlist => \@modlist, testname => $testname, diskimg => $diskimg, backend_info => $backend_info, resultfiles => \@resultfiles, ulogs => \@ulogs, test_duration => $test_duration },
);

print header(-charset=>"UTF-8", -type=>"text/html");
print $mt->render('resultdetails');
