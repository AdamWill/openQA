#!/usr/bin/perl -w
use strict;
use CGI ":standard";
use FindBin;
use lib "$FindBin::Bin/modules";
use openqa;
use Text::MicroTemplate "encoded_string";
use Text::MicroTemplate::Extended;

my $testname=$ENV{PATH_INFO};
if(!defined $testname) { print header(-status=>404)."must specify result file as path"; exit 0 }
$testname=~s%^/%%;
if($testname=~/(?:\.\.)|[^a-zA-Z0-9._+-]/){ print header(-status=>"403 Forbidden")."Forbidden: invalid path"; exit 0 }
$testname=~s/\.autoinst\.txt$//; $testname=~s/\.ogv$//; # be tolerant in what we accept
my $imgdir=openqa::imgdir($testname);
my $fqfn="$resultdir/$testname.ogv.autoinst.txt";
if(!-e $fqfn) { print header(-status=>404)."file not found"; exit 0 }

my $results = test_result($testname);

my @timeouts=<$imgdir/timeout-[0-9]*.ppm*>;
if(@timeouts) {
	unshift(@{$results->{'testmodules'}}, {
			'name' => 'timeout',
			'result' => 'na'
	});
}

my @modlist=();
foreach my $module (@{$results->{'testmodules'}}) {
	my $name = $module->{'name'};
	# add link to $imgdir/$name*.ppm via png CGI
	my @imglist;
	foreach my $imgpath (<$imgdir/$name-[0-9]*.ppm*>) {
		my $imgres = $module->{'screenshots'}->[scalar(@imglist)]->{'refimg_result'} || 'na';
		if($imgres eq "na") {
			$imgres = $module->{'screenshots'}->[scalar(@imglist)]->{'ocr_result'} || 'na';
		}
		$imgpath = data_name($imgpath);
		push(@imglist, {name => $imgpath, result => $imgres});
	}

	# add link to $imgdir/$name*.wav via ogg CGI
	my @wavlist;
	foreach my $wavpath (<$imgdir/$name-[0-9]*.wav>) {
		my $wavres = $module->{'audiodumps'}->[scalar(@wavlist)] || 'na';
		$wavpath = data_name($wavpath);
		push(@wavlist, {name => $wavpath, result => $wavres});
	}

	# add link to $imgdir/$name*.txt as direct link
	my @ocrlist;
	foreach my $ocrpath (<$imgdir/$name-[0-9]*.txt>) {
		$ocrpath = data_name($ocrpath);
		my $ocrscreenshotid = $ocrpath;
		$ocrscreenshotid=~s/^\w+-(\d+)/$1/;
		my $ocrres = $module->{'screenshots'}->[--$ocrscreenshotid]->{'ocr_result'} || 'na';
		push(@ocrlist, {name => $ocrpath, result => $ocrres});
	}

	my $image = (get_testimgs($module->{'name'}))?1:0;
	my $sound = (get_testwavs($module->{'name'}))?1:0;
	my $ocr = (@ocrlist)?1:0;
	push(@modlist, {
		name => $module->{'name'},
		result => $module->{'result'},
		screenshots => \@imglist, wavs => \@wavlist, ocrs => \@ocrlist,
		refimg => $image, audio => $sound, ocr => $ocr
	});
}

# Pseudo testmodules
for my $module ("standstill", "isosize", "overall") {
	push(@modlist, {
		name => $module,
		result => $results->{$module} || 'na',
		screenshots => [], wavs => [], ocrs => [],
		refimg => 0, audio => 0, ocr => 0
	});
}

my $backlogpath = back_log($testname);
my $diskimg = 0;
if(-e "$backlogpath/l1") {
	if((stat("$backlogpath/l1"))[12] && !((stat("$backlogpath/l2"))[12])) { # skip raid
		$diskimg = 1;
	}
}

my $backend_info = parse_log_json($fqfn);

my $mt = Text::MicroTemplate::Extended->new(
	include_path  => ['../htdocs/template'],
	template_args => { modlist => \@modlist, testname => $testname, diskimg => $diskimg, backend_info => $backend_info },
);

print header(-charset=>"UTF-8", -type=>"text/html");
print $mt->render('resultdetails');
