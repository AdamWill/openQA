#!/usr/bin/perl -w
use strict;
use CGI ":standard";
use lib "/srv/www/cgi-bin/modules";
use awstandard;
use openqa;
use Text::MicroTemplate "encoded_string";
use Text::MicroTemplate::Extended;

my $readonly=!is_authorized_rw();
my $testfilter;
$testfilter = $ENV{PATH_INFO} if($ENV{PATH_INFO}=~m/\w/);
$testfilter = param('test') if(defined param('test'));
$testfilter=~s/\W//g if(defined $testfilter);

# Delete Image
if(!$readonly && param('delete')) {
	my $filename = param('delete');
	if(!($filename=~m/.*-\d+-\d+-.*\.ppm/)) {print header(-status=>403)."invalid path"; exit 0; }
	my $fullname = testimg($filename);
	if (!-e $fullname) {print header(-status=>404)."file not found"; exit 0; }
	unlink($fullname);
	print redirect(-location=>'/refimgs/'.($testfilter?$testfilter:''),-nph=>0,status=>302);
	exit;
}

if(!$readonly && param('deleteclick')) {
	my $filename = param('deleteclick');
	if(!($filename=~m/([a-zA-Z0-9_]+)-\d+--?\d+--?\d+\.ppm/)) {print header(-status=>403)."invalid path"; exit 0; }
	my $fullname = clickimg($filename);
	if (!-e $fullname) {print header(-status=>404)."file not found"; exit 0; }
	unlink($fullname);
	print redirect(-location=>'/refimgs/'.($testfilter?$testfilter:''),-nph=>0,status=>302);
	exit;
}

sub get_tname_int($) {
	m{.*/([a-zA-Z0-9_]+)-\d+.*\.ppm};
	return $1;
}

my %testmodules=();
my @testrefs;
for my $testmodule (get_testimgs((defined $testfilter)?$testfilter:"*")) {
	$testmodule=(parse_refimg_path($testmodule))[0];
	if(!$testmodules{$testmodule}) {
		$testmodules{$testmodule} = {};
		my @screenrefs;
		for my $screenshotid (get_testimgs($testmodule)) {
			$screenshotid=(parse_refimg_path($screenshotid))[1];
			# check if refimgs for this screenshot were already found
			if(!$testmodules{$testmodule}->{$screenshotid}) {
				$testmodules{$testmodule}->{$screenshotid}=1;
				my @refimgs=map {parse_refimg_name($_)} get_testimgs("$testmodule-$screenshotid");
				push(@screenrefs, {screenshot => $screenshotid, refimgs => \@refimgs});
			}
		}
		push(@testrefs, {testmodule => $testmodule, screenrefs => \@screenrefs});
	}
}

my %testmodules_interact=();
my @testinteracts;
for my $testmodule (sort(map {get_tname_int($_)} (get_waitimgs((defined $testfilter)?$testfilter:"*"),get_clickimgs((defined $testfilter)?$testfilter:"*")))) {
	$testmodule=~s{.*/(\w+)-.*\.ppm}{$1};
	if(!$testmodules_interact{$testmodule}) {
		$testmodules_interact{$testmodule} = 1;
		my @waitimgs = map {data_name($_)} get_waitimgs($testmodule);
		my @clickimgs = map {data_name($_)} get_clickimgs($testmodule);
		push(@testinteracts, {testmodule => $testmodule, waitimgs => \@waitimgs, clickimgs => \@clickimgs});
	}
}

my @audiofiles=map {data_name($_)} get_testwavs((defined $testfilter)?$testfilter:"*");


my $mt = Text::MicroTemplate::Extended->new(
	include_path  => ['../htdocs/template'],
	template_args => { testfilter => (defined $testfilter)?$testfilter:'', testrefs => \@testrefs, audiofiles => \@audiofiles, testinteracts => \@testinteracts },
);

print header(-charset=>"UTF-8", -type=>"text/html");
print $mt->render('refimgs');
