#!/usr/bin/perl -w
use strict;
use CGI ":standard";
use FindBin;
use lib "$FindBin::Bin/modules";
use Image::Magick;
use awstandard;
use openqa;
use Text::MicroTemplate "encoded_string";
use Text::MicroTemplate::Extended;

my $name=$ENV{PATH_INFO};
if($name=~m/\.\./) {print header(-status=>403)."invalid path"; exit 0; }

$name=~s/^$prj//;
$name=~s/^\/$prj//;

my(undef,undef,$testname,$testmodule,$screenshotid) = split(/\//, $name);

my $results = test_result($testname);
if (!defined($results)) {print header(-status=>404)."no testresults found: ".$results; exit 0; }

my $module = test_result_module($results->{'testmodules'}, $testmodule);
my $module_detail = $module->{'details'}->[$screenshotid-1];
my $imgname = $module_detail->{'screenshot'};
my $needle = $module_detail->{'area'}->[0];

#my $fullname="/$basedir/$prj/testresults/$testname/$imgname";
#my $p = new Image::Magick(depth=>8);
#$p->Read($fullname, depth=>8);
#my ($img_width,$img_height) = $p->Get('width','height');
my ($img_width,$img_height) = qw(1024 768);

my @imglist=(); # FIXME: list of needles

my $mt = Text::MicroTemplate::Extended->new(
	include_path  => ['../htdocs/template'],
	template_args => { testname => $testname, imgname => $imgname, img_width => $img_width,
                           img_height => $img_height, imglist => \@imglist, screenshot => $needle },
);

print header(-charset=>"UTF-8", -type=>"text/html");
print $mt->render('viewimg');
