#!/usr/bin/perl -w
use strict;
use CGI ":standard";
use FindBin;
use JSON;
use lib "$FindBin::Bin/modules";
#use Image::Magick;
use awstandard;
use openqa;
use Text::MicroTemplate "encoded_string";
use Text::MicroTemplate::Extended;

my $fn=$ENV{PATH_INFO};
if($fn=~m/\.\./) {print header(-status=>403)."invalid path"; exit 0; }
$fn=~s%^/%%;
my($action,$testname,$testmodule,$testindex) = split(/\//, $fn);

my $results = test_result($testname);
unless ($results) { print header(-status=>404)."no testresults found"; exit 0; }

my $module = test_result_module($results->{'testmodules'}, $testmodule);
unless ($module) { print header(-status=>404)."module not found"; exit 0; }

my $modinfo = get_running_modinfo($results);
unless ($testindex =~ m/^\d+$/ && $testindex > 0) {
	print header(-status=>403)."invalid index"; exit 0;
}

if ($testindex > @{$module->{'details'}}) {
	# This means that the module have no details at all
	if ($testindex == 1) {
		my $mt = Text::MicroTemplate::Extended->new(
			include_path  => ['../htdocs/template'],
			template_args => { testname => $testname, testmodule => $testmodule, testindex => $testindex,
					   action => 'viewimg', modinfo => $modinfo, tabmode => 'screenshot' });

		print header(-charset=>"UTF-8", -type=>"text/html");
		print $mt->render('nodetails');
		exit 0;

	# In this case there are details, we simply run out of range
	} else {
		print header(-status=>403)."invalid index"; exit 0;
	}
}

my $module_detail = $module->{'details'}->[$testindex-1];
my $imgname = $module_detail->{'screenshot'};

my $needles = [];
my $screenshot = "/$prj/testresults/$testname/$imgname";
if ($module_detail->{'needle'}) {
	my $needle = needle_info($module_detail->{'needle'}, $results->{'distribution'});
	push(@$needles, {'name' => $module_detail->{'needle'}, 'image' => $needle->{'imageurl'},
			'areas' => $needle->{'area'}, 'matches' => []});
	for my $area (@{$module_detail->{'area'}}) {
		push(@{$needles->[0]->{'matches'}},
			{'xpos' => int $area->{'x'}, 'width' => int $area->{'w'},
			 'ypos' => int $area->{'y'}, 'height' => int $area->{'h'},
			 'type' => $area->{'result'}, 'similarity' => int $area->{'similarity'}});
	}
} elsif ($module_detail->{'needles'}) {
	my $needlename;
	my $needleinfo;
	for my $needle (@{$module_detail->{'needles'}}) {
		$needlename = $needle->{'name'};
		$needleinfo  = needle_info($needlename, $results->{'distribution'});
		next unless $needleinfo;
		push(@$needles, {'name' => $needlename, 'image' => $needleinfo->{'imageurl'},
				'areas' => $needleinfo->{'area'}, 'matches' => []});
		for my $area (@{$needle->{'area'}}) {
			push(@{$needles->[scalar(@$needles)-1]->{'matches'}},
				{'xpos' => int $area->{'x'}, 'width' => int $area->{'w'},
				 'ypos' => int $area->{'y'}, 'height' => int $area->{'h'},
				 'type' => $area->{'result'}, 'similarity' => int $area->{'similarity'}});
		}
	}
}

#my $fullname="/$basedir/$prj/testresults/$testname/$imgname";
#my $p = new Image::Magick(depth=>8);
#$p->Read($fullname, depth=>8);
#my ($img_width,$img_height) = $p->Get('width','height');
my ($img_width,$img_height) = qw(1024 768);

my $mt = Text::MicroTemplate::Extended->new(
	include_path  => ['../htdocs/template'],
	template_args => { testname => $testname, testmodule => $testmodule, testindex => $testindex,
			   action => 'viewimg', modinfo => $modinfo, imglist => $module->{'details'},
			   needles => $needles, screenshot => $screenshot,
			   img_width => $img_width, img_height => $img_height,
			   tabmode => 'screenshot' });

print header(-charset=>"UTF-8", -type=>"text/html");
print $mt->render('viewimg');
