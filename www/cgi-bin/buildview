#!/usr/bin/perl -w
use strict;
use CGI ":standard";
use FindBin;
use lib "$FindBin::Bin/modules";
use awstandard;
use sort_list;
use openqa;
use Scheduler ();
use Text::MicroTemplate "encoded_string";
use Text::MicroTemplate::Extended;

# This tool is specific to openSUSE
# to enable the Release Team to see the quality at a glance

my $fn=$ENV{PATH_INFO};
if($fn=~m/\.\./) {print header(-status=>403)."invalid path"; exit 0; }
$fn=~s%^/%%;
my($build) = split(/\//, $fn);
$build =~ s/^Build//;

my @configs=();
my %archs=();
my %results=();

sub store_result {
	my ($config,$type,$arch,$result) = @_;

	# Populate @configs and %archs
	push(@configs, $config) unless ($config ~~ @configs); # manage xxx.0, xxx.1 (we only want the most recent one)
	$archs{$type} = [] unless $archs{$type};
	push(@{$archs{$type}}, $arch) unless ($arch ~~ @{$archs{$type}});

	# Populate %results
	$results{$config} = {} unless $results{$config};
	$results{$config}{$type} = {} unless $results{$config}{$type};
	$results{$config}{$type}{$arch} = $result;
}

for my $r (<$resultdir/*>) {
	# Iterate over the results, skipping everything but the target build
	next unless -d $r;

	my $testname = path_to_testname($r);
	my $params = openqa::parse_testname($testname);
	next if "Build$build" ne $params->{build};

	my $state;
	my $result;
	my $result_stats;
	# Finished test
	if (-e "$r/autoinst-log.txt") {
		$result = test_result($testname);
		$result_stats = test_result_stats($result);
		my $overall = "fail";
		if (($result->{overall}||'') eq "ok") {
			$overall = ($result->{dents}) ? "unknown" : "ok";
		}
		store_result($params->{extrainfo}, $params->{flavor}, $params->{arch}, { ok=>$result_stats->{ok}||0, unknown=>$result_stats->{unk}||0,
							fail=>$result_stats->{fail}||0, overall=>$overall,
							state=>"done", testname=>$testname });
	# Running test
	} else {
		store_result($params->{extrainfo}, $params->{flavor}, $params->{arch}, { state=>"running", testname=>$testname });
	}
}

for my $job (@{Scheduler::list_jobs('state' => 'scheduled,stopped', 'build'=>$build)||[]}) {
	my $testname = $job->{'name'};
	my $p = openqa::parse_testname($testname);
	store_result($p->{extrainfo}, $p->{flavor}, $p->{arch}, { state=>$job->{state}, testname=>$testname });
}

# Sorting everything
my @types = keys %archs;
@types = sort @types;
@configs = sort @configs;
for my $type (@types) {
	my @sorted = sort(@{$archs{$type}});
	$archs{$type} = \@sorted;
}

my $mt = Text::MicroTemplate::Extended->new(
	include_path  => ['../htdocs/template'],
	template_args => { build => $build, configs => \@configs, types => \@types, archs => \%archs, results => \%results }
);
print header(-charset=>"UTF-8", -type=>"text/html");
print $mt->render('buildview');
