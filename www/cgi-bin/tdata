#!/usr/bin/perl -w
use strict;
use CGI ":standard";
use FindBin;
use lib "$FindBin::Bin/modules";
use awstandard;
use openqa;
use Text::MicroTemplate "encoded_string";
use Text::MicroTemplate::Extended;

# usage: http://openqa.opensuse.org/test/show/openSUSE-NET-x86_64-Build0221/systemsettings

my $readonly=!is_authorized_rw();
my $fn=$ENV{PATH_INFO};
if(!defined $fn) { print header(-status=>404)."must specify result file as path"; exit 0 }
$fn=~s%^/%%;
$fn=~s/\.autoinst\.txt$//; $fn=~s/\.ogv$//; # be tolerant in what we accept
my ($action,$testname,$testmodule)=split("/", $fn);
if($action!~m%^(?:show|raw)$%) {
	print header(-status=>404)."unknown action";
	exit 0;
}

# Delete Image
if(!$readonly && param('delete')) {
	my $filename = param('delete');
	if(!($filename=~m/\w+-\d+-\d+-\w+-\w+\.ppm/)) {print header(-status=>403)."invalid path"; exit 0; }
	my $fullname = testimg($filename);
	if (!-e $fullname) {print header(-status=>404)."file not found"; exit 0; }
	unlink($fullname);
	print redirect(-location=>"/tdata/$action/$testname/$testmodule",-nph=>0,status=>302);
	exit;
}

if(!$readonly && param('deleteclick')) {
	my $filename = param('deleteclick');
	if(!($filename=~m/([a-zA-Z0-9_]+)-\d+--?\d+--?\d+\.ppm/)) {print header(-status=>403)."invalid path"; exit 0; }
	my $fullname = clickimg($filename);
	if (!-e $fullname) {print header(-status=>404)."file not found"; exit 0; }
	unlink($fullname);
	print redirect(-location=>"/tdata/$action/$testname/$testmodule",-nph=>0,status=>302);
	exit;
}

if($testname=~/(?:\.\.)|[^a-zA-Z0-9._+-]/){ print header(-status=>"403 Forbidden")."Forbidden: invalid path"; exit 0 }
my $fqfn="$resultdir/$testname/autoinst-log.txt";
if(!-e $fqfn) { print header(-status=>404)."file not found"; exit 0 }

my $scriptpath=log_to_scriptpath($fqfn, $testmodule);
my $running = 0;
if(!$scriptpath || !-e $scriptpath) {
	$fqfn = running_log($testname).'autoinst-log.txt';
	$running = 1;
	$scriptpath=log_to_scriptpath($fqfn, $testmodule);
	if(!$scriptpath || !-e $scriptpath) {
		$scriptpath||="";
		print header(-status=>404)."test not found: $testmodule $scriptpath"; exit 0
	}
}
if(!-e $fqfn) { print header(-status=>404)."file not found: $fqfn"; exit 0 }

my $script=file_content($scriptpath);
if($action eq "raw") { print header(-type=>"text/plain").$script; exit 0}

my $nicescriptpath = $scriptpath;
$nicescriptpath=~s/^.*autoinst\///;

my %testmodules=();
my @screenrefs;
for my $screenshotid (get_testimgs($testmodule)) {
	$screenshotid=(parse_refimg_path($screenshotid))[1];
	# check if refimgs for this screenshot were already found
	if(!$testmodules{$testmodule}{$screenshotid}) {
		$testmodules{$testmodule}{$screenshotid}=1;
		my @refimgs=map {parse_refimg_name($_)} get_testimgs("$testmodule-$screenshotid");
		push(@screenrefs, {screenshot => $screenshotid, refimgs => \@refimgs});
	}
}

my @audiofiles=map {data_name($_)} get_testwavs($testmodule);
my @waitimgs=map {data_name($_)} get_waitimgs($testmodule);
my @clickimgs=map {data_name($_)} get_clickimgs($testmodule);


my $mt = Text::MicroTemplate::Extended->new(
	include_path  => ['../htdocs/template'],
	template_args => { testname => $testname, testmodule => $testmodule, running => $running, screenrefs => \@screenrefs, audiofiles => \@audiofiles, waitimgs => \@waitimgs, clickimgs => \@clickimgs, scriptpath => $nicescriptpath, scriptsrc => $script },
);

print header(-charset=>"UTF-8", -type=>"text/html");
print $mt->render('tdata');
