#!/usr/bin/perl -w
use strict;
use CGI ":standard";
use lib "/srv/www/cgi-bin/modules";
use awstandard;
use openqa;

# usage: http://openqa.opensuse.org/test/show/openSUSE-NET-x86_64-Build0221/systemsettings

my $fn=$ENV{PATH_INFO};
if(!defined $fn) { print header(-status=>404)."must specify result file as path"; exit 0 }
$fn=~s%^/%%;
$fn=~s/\.autoinst\.txt$//; $fn=~s/\.ogv$//; # be tolerant in what we accept
my ($action,$testrun,$teststep)=split("/", $fn);
if($action!~m%^(?:show|raw)$%) {
	print header(-status=>404)."unknown action";
	exit 0;
}
$fn=$testrun;
if($fn=~/(?:\.\.)|[^a-zA-Z0-9._+-]/){ print header(-status=>"403 Forbidden")."Forbidden: invalid path"; exit 0 }
my $resultdir="$basedir/$prj/video";
my $fqfn="$resultdir/$fn.ogv.autoinst.txt";
if(!-e $fqfn) { print header(-status=>404)."file not found"; exit 0 }

my @fnsplit=split_filename($fqfn);
$fnsplit[0].=" ".openqa::path_to_loglink($fqfn);

#my @lines=parse_log($fqfn);
my $scriptpath=log_to_scriptpath($fqfn, $teststep);
if(!$scriptpath || !-e $scriptpath) { print header(-status=>404)."test not found: $teststep $scriptpath"; exit 0 }

my $script=file_content($scriptpath);
if($action eq "raw") { print header(-type=>"text/plain").$script; exit 0}


sub niceoutput($)
{
	my $script=shift;
	$script=~s{sub is_applicable}{# this function decides if the test shall run\n$&};
	$script=~s{sub run}{# this part contains the steps to run this test\n$&};
	$script=~s{sub checklist}{# this part contains known hash values of good or bad results\n$&};
	eval "require Perl::Tidy;" or return $script;
	push(@ARGV,"-html", "-css=/srv/www/htdocs/static/perltidy.css");
	my @out;
	Perl::Tidy::perltidy(
		source => \$script,
		destination => \@out,
	);
	my $out=join("",@out);
	#$out=~s/.*<body>//s;
	$out=~s/.*<!-- contents of filename: perltidy -->//s;
	$out=~s{</body>.*}{}s;
	return $out;
}


my @out=(niceoutput($script));

my ($header,$footer)=get_header_footer(qq{<a href="/results/">Results</a> &gt; $fn});
$header=~s{<link}{<link href="/static/perltidy.css" rel="stylesheet" type="text/css" />\n$&};
print header("text/html").
$header.
qq{
<div id="content" class="container_16 content-wrapper">
  <div class="grid_2 box box-shadow alpha" id="cropdetails_box">
    <div class="box-header aligncenter">Actions</div>
    <div class="aligncenter">
			$fnsplit[0] <a href="/results/"><img src="/images/back.png" alt="back" title="back to overview page" /></a> 
    </div>
  </div>

	<div class="grid_14 box box-shadow omega" style="padding-left: 1.5%;">
		<h2>Results</h2>
		<p>This tool displays a test description.
		<br/>
		<a href="/test/raw/$fn/$teststep">get the test in raw format</a>
		<br/>
		<!-- $fnsplit[0] <a href="/results/"><img src="/images/back.png" alt="back" title="back to overview page" /></a> -->
		<br />
		</p>
		@out
	</div>
</div>
}.
$footer;

