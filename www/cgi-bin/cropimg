#!/usr/bin/perl -w
use strict;
use CGI qw(:standard :cgi-lib);
use FindBin;
use lib "$FindBin::Bin/modules";
use openqa;
use File::Copy;
use Text::MicroTemplate "encoded_string";
use Text::MicroTemplate::Extended;

my $fn=$ENV{PATH_INFO};
if($fn=~m/\.\./) {print header(-status=>403)."invalid path"; exit 0; }
$fn=~s%^/%%;
my($action,$testname,$testmodule,$testindex) = split(/\//, $fn);

my $results = test_result($testname);
unless ($results) { print header(-status=>404)."no testresults found"; exit 0; }

my $module = test_result_module($results->{'testmodules'}, $testmodule);
unless ($module) { print header(-status=>404)."module not found"; exit 0; }

unless ($testindex =~ m/^\d+$/ && $testindex > 0 && $testindex <= @{$module->{'details'}}) {
	print header(-status=>403)."invalid index"; exit 0;
}

my $module_detail = $module->{'details'}->[$testindex-1];
my $imgname = $module_detail->{'screenshot'};
my $modinfo = get_running_modinfo($results);

if ($action eq "save") {
	my $json = param('json');
	my $imagepath = param('imagepath');
	my $needlename = param('needlename');
	my $baseneedle = $results->{'needledir'};
	$baseneedle = "$baseneedle/$needlename";
	copy($imagepath, "$baseneedle.png") or die "copy failed $!";
	system("optipng", "-quiet", "$baseneedle.png");
	open(J, ">", "$baseneedle.json") or die "$baseneedle: $!\n";
	print J $json;
	close(J);
}


# Each object in $needles will contain the name, both the url and the local path
# of the image and 2 lists of areas: 'area' and 'matches'.
# The former refers to the original definitions and the later shows the position
# found (best try) in the actual screenshot.
# The first element of the needles array is the screenshot itself, with an empty
# 'areas' (there is no needle associated to the screenshot) and with all matching
# areas in 'matches'.
my $needles = [];
# All tags (from all needles)
my $tags = [];
if ($module_detail->{'needle'}) {

	# First position: the screenshot with all the matching areas (in result)
	push(@$needles, {'name' => 'screenshot',
			'imageurl' => "/$prj/testresults/$testname/$imgname",
			'imagepath' => "$basedir/$prj/testresults/$testname/$imgname",
			'area' => [], 'matches' => [], 'tags' => []});
	for my $area (@{$module_detail->{'area'}}) {
		push(@{$needles->[0]->{'matches'}},
			{'xpos' => $area->{'x'}, 'width' => $area->{'w'},
			 'ypos' => $area->{'y'}, 'height' => $area->{'h'},
			 'type' => 'match'});
	}
	# Second position: the only needle (with the same matches)
	my $needle = needle_info($module_detail->{'needle'}, $results->{'needledir'});
	push(@$needles, {'name' => $module_detail->{'needle'}, 'imageurl' => $needle->{'imageurl'},
			'imagepath' => $needle->{'image'}, 'area' => $needle->{'area'},
			'tags' => $needle->{'tags'}, 'matches' => $needles->[0]->{'matches'}});
	for my $t (@{$needle->{'tags'}}) {
		push(@$tags, $t) unless grep(/^$t$/, @$tags);
	}


} elsif ($module_detail->{'needles'}) {

	# First position: the screenshot
	push(@$needles, {'name' => 'screenshot',
			'imageurl' => "/$prj/testresults/$testname/$imgname",
			'imagepath' => "$basedir/$prj/testresults/$testname/$imgname",
			'area' => [], 'matches' => [], 'tags' => []});
	# Afterwards, all the candidate needles
	my $needleinfo;
	my $needlename;
	my $area;
	# For each candidate we will use theee variables:
	# $needle: needle information from result, in which 'areas' refers to the best matches
	# $needlename: read from the above
	# $needleinfo: actual definition of the needle, with the original areas
	# We also use $area for transforming the match information intro a real area
	for my $needle (@{$module_detail->{'needles'}}) {
		$needlename = $needle->{'name'};
		$needleinfo  = needle_info($needlename, $results->{'needledir'});
		push(@$needles, {'name' => $needlename,
			'imageurl' => $needleinfo->{'imageurl'},
			'imagepath' => $needleinfo->{'image'},
			'tags' => $needleinfo->{'tags'},
			'area' => $needleinfo->{'area'}, 'matches' => []});
		for my $match (@{$needle->{'area'}}) {
			$area = {'xpos' => $match->{'x'}, 'width' => $match->{'w'},
				 'ypos' => $match->{'y'}, 'height' => $match->{'h'},
				 'type' => 'match'};
			push(@{$needles->[0]->{'matches'}}, $area);
			push(@{$needles->[scalar(@$needles)-1]->{'matches'}}, $area);
		}
		for my $t (@{$needleinfo->{'tags'}}) {
			push(@$tags, $t) unless grep(/^$t$/, @$tags);
		}
	}
} else {
	# Failing with not a single candidate needle
	push(@$needles, {'name' => 'screenshot',
			'imageurl' => "/$prj/testresults/$testname/$imgname",
			'imagepath' => "$basedir/$prj/testresults/$testname/$imgname",
			'area' => [], 'matches' => [], 'tags' => []});
}

# Default values (area: matches from best candidate, tags: tags from best
# candidate)
my $default_needle = {};
my $default_name;
# This should be always true (we are supposed to have at least one needle
# besides the screenshot)
if (scalar(@$needles) > 1) {
	$default_needle->{'area'} = $needles->[1]->{'matches'};
	$default_needle->{'tags'} = $needles->[1]->{'tags'};
	$default_name = $needles->[1]->{'name'};
} else {
	$default_needle->{'area'} = [];
	$default_needle->{'tags'} = [];
	$default_name = $testmodule;
}
$default_name = $default_name."-".time;

my $mt = Text::MicroTemplate::Extended->new(
	include_path  => ['../htdocs/template'],
	template_args => { testname => $testname, testmodule => $testmodule, testindex => $testindex,
			   action => 'cropimg', modinfo => $modinfo, imglist => $module->{'details'},
                           needles => $needles, tags => $tags, default_needle => $default_needle,
			   needlename => $default_name});

print header(-charset=>"UTF-8", -type=>"text/html");
print $mt->render('cropimg');
