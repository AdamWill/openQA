#!/usr/bin/perl -w
use strict;
use CGI qw(:standard :cgi-lib);
use FindBin;
use lib "$FindBin::Bin/modules";
use openqa;
use File::Copy;
use Text::MicroTemplate "encoded_string";
use Text::MicroTemplate::Extended;

my $name=$ENV{PATH_INFO};
if($name=~m/\.\./) {print header(-status=>403)."invalid path"; exit 0; }
$name=~s/\.png$//;
$name=~s/\.jpg$//;

$name=~s/^$prj\///;
$name=~s/^\/$prj\//\//;

my $fullname="/$basedir/$prj/$name.png";
if (!-e $fullname) {print header(-status=>404)."file not found: ".$fullname; exit 0; }

my(undef,undef,$testname,$imgname) = split(/\//, $name);
my $imgdir=openqa::imgdir($testname);
my ($testmodule,undef) = split('-',$imgname);

sub testoptions($) {
	m/.*\/(.*?)-1/;
	return $1;
}

# add link to $imgdir/$name*.png via png CGI
my @imglist=map {data_name($_)} <$imgdir/$testmodule-*.png>;
my @testlist=map {testoptions($_)} <$imgdir/*-1.png>; #FIXME: show all needles

# Get Test Result
my $fqfn="$resultdir/$testname.ogv.autoinst.txt";
if(!-e $fqfn) { print header(-status=>404)."file not found"; exit 0 }
my @lines=parse_log($fqfn);
my $testresult = '';
foreach my $entry (@lines) {
	my ($name,$result)=@$entry;
	if($name eq $testmodule) {
		$testresult = $result;
		last;
	}
}

$testresult=~s{^$}{unknown};
my $refimg_result = $testresult;
if($refimg_result=~m/.*(\(.*\)).*/) {
	$refimg_result = $1;
}
else {
	$refimg_result = '';
}
$testresult=~s/^(.*?)\s.*/$1/;

## fetch needle info
#my $jsonfile=$fullname.'.json';
#open( my $fh, '<', $jsonfile ) or die "opening $jsonfile failed: $!";
#my $needle_meta = JSON::decode_json( <$fh> ) || die "broken json $jsonfile";
#close($fh);
#
#die "json $jsonfile missing needledir" unless( $needle_meta->{'needledir'} && $needle_meta->{'tag'} );

my $needle = "/$prj/testresults/$testname/$imgname";

my $results = test_result($testname);
if (!defined($results)) {print header(-status=>404)."no testresults found: ".$results; exit 0; }
if (!defined($results->{'needledir'})) {print header(-status=>404)."needledir missing in testresults."; exit 0; }

#FIXME: Validate json
#FIXME: Do not create new needle on every save
if(my $json = param('json')) {
    my $t = time();
    my $path = $results->{'needledir'}.'/';
    my $basename = "$imgname-$t";

    my $fn = $path.$basename.'.json';
    open(J, ">", $fn) or die "$fn: $!\n";
    print J $json;
    close(J);

    copy( $fullname, $path.$basename.'.png' ) or die "copy failed: $!";

    ($needle = $path.$basename) =~ s|^$basedir||;
}

print STDERR "needle:$needle\n";
#$needle_meta->{'tag'}
my $mt = Text::MicroTemplate::Extended->new(
	include_path  => ['../htdocs/template'],
	template_args => { testname => $testname, testmodule => $testmodule, imgname => $imgname,
                           testresult => $testresult, refimg_result => $refimg_result,
                           imglist => \@imglist, testlist => \@testlist, needle => $needle },
);

print header(-charset=>"UTF-8", -type=>"text/html");
print $mt->render('cropimg');
