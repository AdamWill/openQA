#!/usr/bin/perl -w
use strict;
use CGI ":standard";
use FindBin;
use lib "$FindBin::Bin/modules";
use openqa;
use Image::Magick;
use Text::MicroTemplate "encoded_string";
use Text::MicroTemplate::Extended;

my $name=$ENV{PATH_INFO};
if($name=~m/\.\./) {print header(-status=>403)."invalid path"; exit 0; }
$name=~s/\.png$//;
$name=~s/\.jpg$//;

$name=~s/^$prj\///;
$name=~s/^\/$prj\//\//;

my $fullname="/$basedir/$prj/$name.ppm";
if (!-e $fullname) {
        $fullname.=".gz";
	if (!-e $fullname) {print header(-status=>404)."file not found: ".$fullname; exit 0; }
}
my(undef,undef,$testname,$imgname) = split(/\//, $name);
my $imgdir=openqa::imgdir($testname);
my ($testmodule,undef) = split('-',$imgname);

sub testoptions($) {
	m/.*\/(.*?)-1/;
	return $1;
}

# add link to $imgdir/$name*.ppm via png CGI
my @imglist=map {data_name($_)} <$imgdir/$testmodule-[0-9]*.ppm*>;
my @testlist=map {testoptions($_)} <$imgdir/*-1.ppm*>;

# Get Test Result
my $fqfn="$resultdir/$testname.ogv.autoinst.txt";
if(!-e $fqfn) { print header(-status=>404)."file not found"; exit 0 }
my @lines=parse_log($fqfn);
my $testresult = '';
foreach my $entry (@lines) {
	my ($name,$result)=@$entry;
	if($name eq $testmodule) {
		$testresult = $result;
		last;
	}
}

$testresult=~s{^$}{unknown};
my $refimg_result = $testresult;
if($refimg_result=~m/.*(\(.*\)).*/) {
	$refimg_result = $1;
}
else {
	$refimg_result = '';
}
$testresult=~s/^(.*?)\s.*/$1/;

my %cropped;

if(param()) {
	my ($x1,$y1,$x2,$y2,$width,$height,$result,$match) = (param('x1'),param('y1'),param('x2'),param('y2'),param('width'),param('height'),param('result'),param('match'));
	if($x2 && $y2 && $width && $height && $result && $match) {
		my $image = new Image::Magick();
		$image->Read($fullname);
		$image->Crop($width.'x'.$height.'+'.$x1.'+'.$y1);
		my ($new_name,$new_fullname);
		for(my $i=1;;$i++) {
			$new_name = $imgname.'-'.$i.'-'.$result.'-'.$match;
			$new_fullname = testimg("$new_name.ppm");
			my $match_fullname = testimg("$imgname-$i-*.ppm");
			my @f =  glob($match_fullname);
			last if(!-e $new_fullname && scalar(@f) eq 0);
		}
		$image->Write($new_fullname);
		undef $image;
		%cropped = ('x1' => $x1, 'y1' => $y1, 'x2' => $x2, 'y2' => $y2, 'width' => $width, 'height' => $height, 'result' => $result, 'match' => $match, 'name' => $new_name);
	}
}

my $mt = Text::MicroTemplate::Extended->new(
	include_path  => ['../htdocs/template'],
	template_args => { testname => $testname, testmodule => $testmodule, imgname => $imgname, testresult => $testresult, refimg_result => $refimg_result, imglist => \@imglist, testlist => \@testlist, cropped => \%cropped },
);

print header(-charset=>"UTF-8", -type=>"text/html");
print $mt->render('cropimg');
